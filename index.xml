<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Peyton Walters</title>
    <link>https://pawa.lt/</link>
    <description>Recent content on Peyton Walters</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Peyton Walters</copyright>
    <lastBuildDate>Fri, 26 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://pawa.lt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automating k3s Deployment on Proxmox</title>
      <link>https://pawa.lt/posts/2019/07/automating-k3s-deployment-on-proxmox/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/posts/2019/07/automating-k3s-deployment-on-proxmox/</guid>
      <description>For about 2 years now, I&amp;rsquo;ve been very interested in learning Kubernetes and potentially using it in my homelab, but there&amp;rsquo;s always been one main thing holding me back: the complexity. To get Kubernetes up the first time, I had to spin up a bunch of VMs manually and then put tons of binaries on each one of them. Even if I could get a cluster spun up, there was no chance I could reproduce my work or deploy anything useful on the cluster.</description>
    </item>
    
    <item>
      <title>Caplance Development Update 3</title>
      <link>https://pawa.lt/posts/2019/07/caplance-development-update-3/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/posts/2019/07/caplance-development-update-3/</guid>
      <description>ðŸŽ‰ We made it! ðŸŽ‰ After 6 months of work, Caplance is finally at MVP. The brief release notes can be found here.
To get to MVP, I had to implement the following functionality:
 Logging Config file parsing  Combining all the previous updates, we get the following feature set for the MVP:
 Packet listening Packet forwarding over UDP Direct reply from backends, allowing the load balancer to only have to handle incoming traffic Dynamic backend registration and deregistration Backend commands and health checks Logging Config file parsing  I&amp;rsquo;ll briefly cover the improvements so far and then give a short demo of Caplance working.</description>
    </item>
    
    <item>
      <title>Caplance Development Update 2</title>
      <link>https://pawa.lt/posts/2019/06/caplance-development-update-2/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/posts/2019/06/caplance-development-update-2/</guid>
      <description>I&amp;rsquo;m back! Over the past few weeks, I&amp;rsquo;ve had much more time to work on Caplance than I had in the prior months, so, naturally, a ton of work has gotten done in these few weeks. Specifically, I&amp;rsquo;ve implemented the following functionality:
 Backend registration The following controls from the backends:  PAUSE DEREGISTER RESUME HEALTH  caplancectl to tell a running client process to issue one of those commands Graceful stop for backends Packet listening on NFQUEUE Refactor project structure  If you&amp;rsquo;ve been keeping track, you&amp;rsquo;ll notice that this puts us very close to the Caplance MVP!</description>
    </item>
    
    <item>
      <title>NFQUEUE and the Mysterious RESET</title>
      <link>https://pawa.lt/posts/2019/06/nfqueue-and-the-mysterious-reset/</link>
      <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/posts/2019/06/nfqueue-and-the-mysterious-reset/</guid>
      <description>While working on my load balancer, Caplance, I ran into a very strange error when trying to establish a connection between a client and a backend. Before I go to deep, though, let me give a quick intro into how TCP connection establishment works.
Types of Message When establishing a TCP connection, there are 4 possible packet types you could see:
 SYN (S in tcpdump) - Always the first message sent.</description>
    </item>
    
    <item>
      <title>My Neovim Go Setup</title>
      <link>https://pawa.lt/posts/2019/06/my-neovim-go-setup/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/posts/2019/06/my-neovim-go-setup/</guid>
      <description>Recently, I moved from writing my Go in VSCode to writing it in Neovim. I did this for two main reasons:
 Ubiquity
I use Neovim for writing pretty much all my other code (except Java), so it was weird to use VSCode for this one purpose.
 Terminal Integration
I hate the VS Code terminal. It doesn&amp;rsquo;t have the character support I want, and it overrides a bunch of keys (for example, Ctrl+f for fish autocomplete).</description>
    </item>
    
    <item>
      <title>Caplance Development Update 1</title>
      <link>https://pawa.lt/posts/2019/05/caplance-development-update-1/</link>
      <pubDate>Sat, 25 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/posts/2019/05/caplance-development-update-1/</guid>
      <description>After countless hours spent reading the GoDocs, googling &amp;ldquo;gre packets golang&amp;rdquo;, and staring at the term SIGSEV, I&amp;rsquo;ve got an update! I&amp;rsquo;ve made pretty significant progress on the actual load balancer, implementing most of the base functionality. So far, the load balancer can:
 listen for and ingest whole IP packets select the backend for a packet based on a combination of IP and source port encapsulate packets in UDP and send them to the appropriate backend attach a specified virtual IP  I&amp;rsquo;ve also implemented some extremely rudimentary testing and setup, but I&amp;rsquo;m going to rework those once the project structure solidifies some more.</description>
    </item>
    
    <item>
      <title>Constant Improvement - A Reflection</title>
      <link>https://pawa.lt/posts/2019/05/constant-improvement-a-reflection/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/posts/2019/05/constant-improvement-a-reflection/</guid>
      <description>From Sunday, 3/10/19 to today, Tuesday 5/21/19, I&amp;rsquo;ve been working on improving. During that time, I decided on a single, small improvement to make each week, and I tried to execute on it. Each week, I&amp;rsquo;d outline the motivation behind my decision, the tools I&amp;rsquo;d be using, and the rules I&amp;rsquo;d have to follow during the week. The next week, I&amp;rsquo;d write a short reflection on how I thought the week went with respect to my adherence to the rules I set.</description>
    </item>
    
    <item>
      <title>Mininet for Education</title>
      <link>https://pawa.lt/posts/2019/04/mininet-for-education/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/posts/2019/04/mininet-for-education/</guid>
      <description>For about 2 years, I built and led the NEAT Rack Project, a program meant to teach high school and college aged students network engineering. In this program, we covered things as basic as introduction to Linux and as advanced as firewalling or dynamic routing with BGP. This program was well-run, well-written, and it overall did a solid job of giving students an introduction to technology infrastructure. There was just one problem with it - hardware.</description>
    </item>
    
    <item>
      <title>Maglev - A Next-Generation Load Balancer</title>
      <link>https://pawa.lt/posts/2019/04/maglev-a-next-generation-load-balancer/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/posts/2019/04/maglev-a-next-generation-load-balancer/</guid>
      <description>When reading Google&amp;rsquo;s SRE book, I came across the section on load balancing. The book breaks up load balancing into three levels:
 DNS level Network level/Virtual IP level Datacenter level  While I was familiar with the Datacenter level (aka reverse proxy load balancing) and DNS load balancing (achieved partially through round robin DNS), I had never looked at network-level load balancing. After reading this section, I was fascinated with how their network-level load balancing works.</description>
    </item>
    
    <item>
      <title>On the Value of Formal Education</title>
      <link>https://pawa.lt/posts/2019/04/on-the-value-of-formal-education/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/posts/2019/04/on-the-value-of-formal-education/</guid>
      <description>Over the past few years, I&amp;rsquo;ve started to see a multitude of online videos/articles about the weakening value of college, particularly in the area of computer science. Whether it&amp;rsquo;s Devon Crawford talking about how he dropped out of school or Mashable writing an article trashing CS degrees, the popular view on the internet seems to be &amp;ldquo;Eh, just learn it on your own.&amp;rdquo; I&amp;rsquo;ve struggled with my opinion significantly on this topic, but overall, I think this view is deeply flawed.</description>
    </item>
    
    <item>
      <title>Hacking Farkle</title>
      <link>https://pawa.lt/posts/2018/12/hacking-farkle/</link>
      <pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/posts/2018/12/hacking-farkle/</guid>
      <description>Recently, my family has been playing Farkle, a simple but difficult-to-analyze dice game. Farkle has the following rules:
 At the start of the turn, each player must roll the 6 dice. After rolling, the player sets aside all the dice that scored. The player can then choose to roll again to potentially get more points or to take the points they have already scored. If the player rolls and scores no points, they get 0 points and their turn is over.</description>
    </item>
    
    <item>
      <title>Thoreau vs. Peterson - A Lesson in Solitude</title>
      <link>https://pawa.lt/thoreau-vs-peterson/</link>
      <pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/thoreau-vs-peterson/</guid>
      <description>Like the water, the Walden ice, seen near at hand, has a green tint, but at a distance is beautifully blue, and you can easily tell it from the white ice of the river, or the merely greenish ice of some ponds, a quarter of a mile off. Sometimes one of those great cakes slips from the ice-man&amp;rsquo;s sled into the village street, and lies there for a week like a great emerald, an object of interest to all passers.</description>
    </item>
    
    <item>
      <title>VPLS with OpenBSD</title>
      <link>https://pawa.lt/posts/2018/01/vpls-with-openbsd/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/posts/2018/01/vpls-with-openbsd/</guid>
      <description>VPLS is extremely useful in allowing multiple sites to be connected to a single bridged domain. Unfortunately, VPLS networks are typically implemented with proprietary technology like a Cisco router. OpenBSD lets us break free of the typical restrictions of proprietary technology and use 100% free software to make a full-fledged VPLS network.
Why VPLS? With VPLS, you can deliver a layer 2 circuit over a routed backbone. This lets you extend that circuit from one location to another over a route that you can easily control.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://pawa.lt/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pawa.lt/about/</guid>
      <description>Hey everyone! I&amp;rsquo;m Peyton Walters and I&amp;rsquo;m a student at the University of Pennsylvania studying Networked and Social Systems Engineering and a software engineering contractor for Bloomberg.
I&amp;rsquo;m particularly interested in distributed systems (particularly Kubernetes), IP networking, and Unix-based operating systems, but there are far more things than that which pique my interest. Some of my past and current work includes:
 SPIRE TPM Plugin, a set of plugins to allow SPIRE to do TPM 2-based node attestation Penn Labs&amp;rsquo; Infrastructure, a repository to fully control a Penn Labs&amp;rsquo; infrastructure as code Caplance, a network-level load balancer in the spirit of Maglev Jiffy, a program that automated the deployment of KVM/Libvirt virtual machines Go Log Server, simple program to send rsyslog entries to a redis stream Alpine, a chef cookbook to add chef support to Alpine Linux  </description>
    </item>
    
  </channel>
</rss>